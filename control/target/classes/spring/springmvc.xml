<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- 一、 非注解的方式进行配置，有利于理解调用过程，但是控制器类中只能允许有一个方法，是一个弊端 -->

    <!--1. 配置处理器适配器 所有的适配器都是实现了 handlerAdapter， 能适配实现了controller接口的处理器-->
    <!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>-->



    <!--2. 配置mapper映射器的两种方式-->

    <!--&lt;!&ndash; 2.1 注册映射器类&ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />-->
    <!--&lt;!&ndash; 2.1 配置映射关系&ndash;&gt;-->
    <!--<bean name ="/queryItems.action" class="com.dustin.controller.item.NonAnnotationItemController" />-->

    <!--&lt;!&ndash; 或者采用第二种方式也可以&ndash;&gt;-->

    <!--&lt;!&ndash; 2.2 注册 Handler &ndash;&gt;-->
    <!--<bean id="nonAnnotationItemController" class="com.dustin.controller.item.NonAnnotationItemController"/>-->
    <!--&lt;!&ndash; 2.2 配置 handle 与url 的映射 &ndash;&gt;-->
    <!--&lt;!&ndash;简单url映射  &ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">-->
        <!--<property name="mappings">-->
            <!--<props>-->
                <!--&lt;!&ndash; 对itemsController1进行url映射，一个处理器可以对应多个 url  &ndash;&gt;-->
                <!--<prop key="/queryItems1.action">nonAnnotationItemController</prop>-->
                <!--<prop key="/queryItems2.action">nonAnnotationItemController</prop>-->
                <!--<prop key="/queryItems3.action">nonAnnotationItemController</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--3， 配置视图解析器-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"/>-->


    <!-- 二、 注解方式进行开发-->


    <!--注解映射器 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
    <!--注解适配器 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->

    <!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
    mvc:annotation-driven默认加载很多的参数绑定方法，
    比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
    实际开发时使用mvc:annotation-driven
     -->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包，相当于配置控制器的bean
      -->
    <context:component-scan base-package="com.dustin.controller"></context:component-scan>
    
    <!-- 配置静态资源解析-->
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/img/**" location="/img/"/>
    
    <!-- 注入拦截器 -->
    <mvc:interceptors>
        <!-- 登录认证拦截器，此拦截器配置为全局拦截器，将会注入到所有的handlerMapper中-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.dustin.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 视图解析器
    解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
     -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!-- 配置jsp路径的后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 自定义参数绑定 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <property name="converters">
            <list>
                <!-- 日期类型转换 -->
                <bean class="com.dustin.control.convert.CustomDateConverter"/>
            </list>
        </property>
    </bean>

</beans>